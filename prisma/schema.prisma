generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  role          String    // "employee", "manager"
  status        String    @default("pending") // "pending", "approved"
  name          String    @default("")
  phoneNumber   String    @unique
  consentToText Boolean   @default(false) // Indicates if the user consents to receive text messages
  restaurant    Restaurant?  @relation(fields: [restaurantId], references: [id])
  restaurantId  Int?
  shifts        Shift[]   @relation("UserShifts") // Relation to shifts assigned to the user
  createdShifts Shift[]   @relation("CreatedByUser") // Relation to shifts created by the user
  createdSchedules Schedule[]   @relation("CreatedByUser") // Relation to schedules created by the user
  createdAvailabilites Availability[]   @relation("CreatedByUser") // Relation to availabilities created by the user
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Restaurant {
  id          Int    @unique 
  name        String
  location    String?
  phoneNumber String?
  status      String   @default("pending") // "pending", "approved"
  users       User[]
  schedules   Schedule[]
  shifts      Shift[] // Back relation to shifts
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Shift {
  id          Int      @id @default(autoincrement())
  name        String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  assignedTo  User?    @relation("UserShifts", fields: [assignedToId], references: [id])
  assignedToId Int?
  schedule    Schedule? @relation(fields: [scheduleId], references: [id])
  scheduleId  Int?
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  createdBy    User     @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById Int
  role        String   // Make this required
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Availability {
  id        Int      @id @default(autoincrement())
  name      String
  date      DateTime // Date of availability
  startTime DateTime // Start time of availability
  endTime   DateTime // End time of availability
  createdBy   User     @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id        Int      @id @default(autoincrement())
  name      String   // e.g., "Week of Oct 15th"
  startDate DateTime
  endDate   DateTime
  shifts    Shift[]
  createdBy    User     @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}